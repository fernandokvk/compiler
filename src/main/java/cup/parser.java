
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import misc.TokenInfo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\003\007\000\002\002" +
    "\005\000\002\002\006\000\002\041\003\000\002\041\005" +
    "\000\002\042\005\000\002\042\005\000\002\042\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\003\000\002" +
    "\042\004\000\002\004\003\000\002\004\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\004\000\002\010\003\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\031" +
    "\003\000\002\031\003\000\002\032\005\000\002\032\005" +
    "\000\002\032\005\000\002\032\005\000\002\027\004\000" +
    "\002\030\006\000\002\030\006\000\002\030\006\000\002" +
    "\030\006\000\002\012\011\000\002\013\007\000\002\014" +
    "\015\000\002\014\015\000\002\015\011\000\002\016\013" +
    "\000\002\017\014\000\002\022\006\000\002\020\003\000" +
    "\002\020\005\000\002\021\004\000\002\023\003\000\002" +
    "\023\005\000\002\024\003\000\002\024\003\000\002\025" +
    "\012\000\002\026\006\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\007\003\000\002\007\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\040\003\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\006\006\001\002\000\004\004\014\001" +
    "\002\000\004\002\013\001\002\000\004\015\007\001\002" +
    "\000\004\052\010\001\002\000\004\016\011\001\002\000" +
    "\004\013\012\001\002\000\004\004\000\001\002\000\004" +
    "\002\001\001\002\000\032\005\031\007\026\010\024\011" +
    "\015\040\021\041\050\042\051\043\030\045\025\046\046" +
    "\047\036\052\032\001\002\000\004\052\260\001\002\000" +
    "\034\005\uffed\007\uffed\010\uffed\011\uffed\020\uffed\040\uffed" +
    "\041\uffed\042\uffed\043\uffed\045\uffed\046\uffed\047\uffed\052" +
    "\uffed\001\002\000\034\005\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\020\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\045\ufff2\046" +
    "\ufff2\047\ufff2\052\ufff2\001\002\000\004\014\257\001\002" +
    "\000\006\017\uffc4\052\uffc4\001\002\000\004\005\256\001" +
    "\002\000\004\052\255\001\002\000\004\052\253\001\002" +
    "\000\004\015\245\001\002\000\004\052\227\001\002\000" +
    "\036\005\uffea\007\uffea\010\uffea\011\uffea\020\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\223\045\uffea\046\uffea\047" +
    "\uffea\052\uffea\001\002\000\004\015\215\001\002\000\004" +
    "\002\uffff\001\002\000\012\015\212\027\060\030\062\031" +
    "\061\001\002\000\004\014\uffe4\001\002\000\034\005\ufff4" +
    "\007\026\010\024\011\015\020\ufff4\040\021\041\050\042" +
    "\051\043\030\045\025\046\046\047\036\052\032\001\002" +
    "\000\034\005\uffe7\007\uffe7\010\uffe7\011\uffe7\020\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\043\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\052\uffe7\001\002\000\004\017\201\001\002\000\034\005" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\020\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\045\uffe6\046\uffe6\047\uffe6\052\uffe6\001" +
    "\002\000\004\014\200\001\002\000\034\005\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\020\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\045\uffe9\046\uffe9\047\uffe9\052\uffe9\001\002\000\004" +
    "\014\177\001\002\000\034\005\uffec\007\uffec\010\uffec\011" +
    "\uffec\020\uffec\040\uffec\041\uffec\042\uffec\043\uffec\045\uffec" +
    "\046\uffec\047\uffec\052\uffec\001\002\000\034\005\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\020\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\043\ufff1\045\ufff1\046\ufff1\047\ufff1\052\ufff1\001\002\000" +
    "\004\014\uffe5\001\002\000\004\015\052\001\002\000\034" +
    "\005\uffe8\007\uffe8\010\uffe8\011\uffe8\020\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\045\uffe8\046\uffe8\047\uffe8\052\uffe8" +
    "\001\002\000\006\017\uffc2\052\uffc2\001\002\000\006\017" +
    "\uffc3\052\uffc3\001\002\000\012\040\021\041\050\042\051" +
    "\052\053\001\002\000\004\012\167\001\002\000\004\012" +
    "\151\001\002\000\004\052\056\001\002\000\010\027\060" +
    "\030\062\031\061\001\002\000\046\021\064\022\112\023" +
    "\103\024\104\025\071\026\066\032\063\033\065\034\110" +
    "\035\101\036\113\037\107\050\077\051\111\052\075\053" +
    "\106\054\070\055\073\001\002\000\046\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\050\uffb0\051\uffb0\052\uffb0" +
    "\053\uffb0\054\uffb0\055\uffb0\001\002\000\046\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\032\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\050\uffae\051\uffae\052" +
    "\uffae\053\uffae\054\uffae\055\uffae\001\002\000\046\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\001\002\000\044\021" +
    "\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\050\uffb2\051" +
    "\uffb2\052\uffb2\054\uffb2\055\uffb2\001\002\000\044\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\054\uffbc\055\uffbc\001\002\000\044\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\032\uffb1\033\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\037\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\054\uffb1\055\uffb1\001\002\000\044\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\054\uffb7\055\uffb7\001\002\000\044\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\032\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\037\uffbd\050\uffbd\051\uffbd\052\uffbd\054" +
    "\uffbd\055\uffbd\001\002\000\040\012\uffad\014\uffad\016\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\001\002" +
    "\000\044\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\054\uffb8\055\uffb8\001\002\000" +
    "\040\012\uffc0\014\uffc0\016\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\001\002\000\040\012\uffac\014\uffac" +
    "\016\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025\uffac\026" +
    "\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac" +
    "\001\002\000\006\012\uffdb\014\uffdb\001\002\000\042\012" +
    "\uffc1\014\uffc1\015\136\016\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\032\063\033\065\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\001\002\000\044\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\050\uffbe\051\uffbe\052\uffbe" +
    "\054\uffbe\055\uffbe\001\002\000\040\012\uffc6\014\uffc6\016" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\001" +
    "\002\000\040\012\ufff6\014\ufff6\016\ufff6\021\064\022\112" +
    "\023\103\024\104\025\071\026\066\032\ufff6\033\ufff6\034" +
    "\110\035\101\036\113\037\107\001\002\000\044\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\050\uffb5\051\uffb5" +
    "\052\uffb5\054\uffb5\055\uffb5\001\002\000\010\050\077\051" +
    "\111\052\130\001\002\000\044\021\uffba\022\uffba\023\uffba" +
    "\024\uffba\025\uffba\026\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\036\uffba\037\uffba\050\uffba\051\uffba\052\uffba\054\uffba" +
    "\055\uffba\001\002\000\044\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055" +
    "\uffb9\001\002\000\012\012\uffdd\014\uffdd\032\063\033\065" +
    "\001\002\000\006\012\uffde\014\uffde\001\002\000\044\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\054\uffb3\055\uffb3\001\002\000\044\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\050\uffb6\051\uffb6" +
    "\052\uffb6\054\uffb6\055\uffb6\001\002\000\040\012\uffc5\014" +
    "\uffc5\016\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\001\002\000\044\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb\055\uffbb" +
    "\001\002\000\044\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\050\uffb4\051\uffb4\052\uffb4\054\uffb4\055\uffb4\001" +
    "\002\000\006\012\uffdc\014\uffdc\001\002\000\044\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\050\uffbf\051\uffbf" +
    "\052\uffbf\054\uffbf\055\uffbf\001\002\000\040\012\ufffd\014" +
    "\ufffd\016\ufffd\021\064\022\112\023\103\024\104\025\071" +
    "\026\066\032\063\033\065\034\110\035\101\036\113\037" +
    "\107\001\002\000\044\021\064\022\112\023\103\024\104" +
    "\025\071\026\066\032\063\033\065\034\110\035\101\036" +
    "\113\037\107\050\077\051\111\052\121\054\070\055\073" +
    "\001\002\000\010\012\ufffc\014\ufffc\016\ufffc\001\002\000" +
    "\040\012\uffc1\014\uffc1\016\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\032\063\033\065\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\001\002\000\006\032\063\033\065" +
    "\001\002\000\004\052\124\001\002\000\040\012\ufff8\014" +
    "\ufff8\016\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\001\002\000\010\052\126\054\070\055\073\001\002" +
    "\000\040\012\ufff7\014\ufff7\016\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\032\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\001\002\000\040\012\ufff9\014" +
    "\ufff9\016\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9" +
    "\026\ufff9\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037" +
    "\ufff9\001\002\000\040\012\uffc1\014\uffc1\016\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\001\002\000\040" +
    "\012\ufff5\014\ufff5\016\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\001\002\000\010\050\077\051\111\052" +
    "\130\001\002\000\010\050\077\051\111\052\130\001\002" +
    "\000\040\012\ufffb\014\ufffb\016\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\025\ufffb\026\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\001\002\000\040\012\ufffa\014" +
    "\ufffa\016\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\001\002\000\016\050\077\051\111\052\143\053\141" +
    "\054\070\055\073\001\002\000\004\016\150\001\002\000" +
    "\006\012\146\016\uffcf\001\002\000\006\012\uffc8\016\uffc8" +
    "\001\002\000\006\012\uffc9\016\uffc9\001\002\000\006\012" +
    "\uffcd\016\uffcd\001\002\000\006\012\uffcc\016\uffcc\001\002" +
    "\000\006\012\uffc7\016\uffc7\001\002\000\016\050\077\051" +
    "\111\052\143\053\141\054\070\055\073\001\002\000\004" +
    "\016\uffce\001\002\000\010\012\uffd3\014\uffd3\016\uffd3\001" +
    "\002\000\044\021\064\022\112\023\103\024\104\025\071" +
    "\026\066\032\063\033\065\034\110\035\101\036\113\037" +
    "\107\050\077\051\111\052\121\054\070\055\073\001\002" +
    "\000\004\012\153\001\002\000\004\052\154\001\002\000" +
    "\010\027\060\030\062\031\061\001\002\000\004\016\156" +
    "\001\002\000\004\017\157\001\002\000\030\007\026\010" +
    "\024\011\015\040\021\041\050\042\051\043\030\045\025" +
    "\046\046\047\036\052\032\001\002\000\004\020\161\001" +
    "\002\000\034\005\uffd7\007\uffd7\010\uffd7\011\uffd7\020\uffd7" +
    "\040\uffd7\041\uffd7\042\uffd7\043\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\052\uffd7\001\002\000\046\021\064\022\112\023\103" +
    "\024\104\025\071\026\066\032\063\033\065\034\110\035" +
    "\101\036\113\037\107\050\077\051\111\052\075\053\165" +
    "\054\070\055\073\001\002\000\006\014\uffe0\016\uffe0\001" +
    "\002\000\012\014\uffe2\016\uffe2\032\063\033\065\001\002" +
    "\000\006\014\uffe3\016\uffe3\001\002\000\006\014\uffe1\016" +
    "\uffe1\001\002\000\044\021\064\022\112\023\103\024\104" +
    "\025\071\026\066\032\063\033\065\034\110\035\101\036" +
    "\113\037\107\050\077\051\111\052\121\054\070\055\073" +
    "\001\002\000\004\012\171\001\002\000\004\052\154\001" +
    "\002\000\004\016\173\001\002\000\004\017\174\001\002" +
    "\000\030\007\026\010\024\011\015\040\021\041\050\042" +
    "\051\043\030\045\025\046\046\047\036\052\032\001\002" +
    "\000\004\020\176\001\002\000\034\005\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\020\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\052\uffd8\001\002\000\034\005" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\020\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\052\ufff0\001" +
    "\002\000\034\005\uffef\007\uffef\010\uffef\011\uffef\020\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\045\uffef\046\uffef\047" +
    "\uffef\052\uffef\001\002\000\030\007\026\010\024\011\015" +
    "\040\021\041\050\042\051\043\030\045\025\046\046\047" +
    "\036\052\032\001\002\000\004\020\203\001\002\000\004" +
    "\045\204\001\002\000\004\015\205\001\002\000\044\021" +
    "\064\022\112\023\103\024\104\025\071\026\066\032\063" +
    "\033\065\034\110\035\101\036\113\037\107\050\077\051" +
    "\111\052\121\054\070\055\073\001\002\000\004\016\207" +
    "\001\002\000\004\014\210\001\002\000\034\005\uffd5\007" +
    "\uffd5\010\uffd5\011\uffd5\020\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\045\uffd5\046\uffd5\047\uffd5\052\uffd5\001\002\000" +
    "\006\005\ufff3\020\ufff3\001\002\000\016\050\077\051\111" +
    "\052\143\053\141\054\070\055\073\001\002\000\004\016" +
    "\214\001\002\000\004\014\uffca\001\002\000\044\021\064" +
    "\022\112\023\103\024\104\025\071\026\066\032\063\033" +
    "\065\034\110\035\101\036\113\037\107\050\077\051\111" +
    "\052\121\054\070\055\073\001\002\000\004\016\217\001" +
    "\002\000\004\017\220\001\002\000\030\007\026\010\024" +
    "\011\015\040\021\041\050\042\051\043\030\045\025\046" +
    "\046\047\036\052\032\001\002\000\004\020\222\001\002" +
    "\000\036\005\uffda\007\uffda\010\uffda\011\uffda\020\uffda\040" +
    "\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda" +
    "\047\uffda\052\uffda\001\002\000\004\017\224\001\002\000" +
    "\030\007\026\010\024\011\015\040\021\041\050\042\051" +
    "\043\030\045\025\046\046\047\036\052\032\001\002\000" +
    "\004\020\226\001\002\000\034\005\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\020\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\052\uffd9\001\002\000\004\015\230" +
    "\001\002\000\010\040\021\041\050\042\051\001\002\000" +
    "\004\052\244\001\002\000\006\012\242\016\uffd2\001\002" +
    "\000\004\016\234\001\002\000\004\013\235\001\002\000" +
    "\010\040\021\041\050\042\051\001\002\000\004\017\237" +
    "\001\002\000\030\007\026\010\024\011\015\040\021\041" +
    "\050\042\051\043\030\045\025\046\046\047\036\052\032" +
    "\001\002\000\004\020\241\001\002\000\034\005\uffd4\007" +
    "\uffd4\010\uffd4\011\uffd4\020\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\045\uffd4\046\uffd4\047\uffd4\052\uffd4\001\002\000" +
    "\010\040\021\041\050\042\051\001\002\000\004\016\uffd1" +
    "\001\002\000\006\012\uffd0\016\uffd0\001\002\000\044\021" +
    "\064\022\112\023\103\024\104\025\071\026\066\032\063" +
    "\033\065\034\110\035\101\036\113\037\107\050\077\051" +
    "\111\052\121\054\070\055\073\001\002\000\004\016\247" +
    "\001\002\000\004\017\250\001\002\000\030\007\026\010" +
    "\024\011\015\040\021\041\050\042\051\043\030\045\025" +
    "\046\046\047\036\052\032\001\002\000\004\020\252\001" +
    "\002\000\034\005\uffd6\007\uffd6\010\uffd6\011\uffd6\020\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\052\uffd6\001\002\000\004\014\254\001\002\000\034" +
    "\005\uffee\007\uffee\010\uffee\011\uffee\020\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\045\uffee\046\uffee\047\uffee\052\uffee" +
    "\001\002\000\012\014\uffdf\027\060\030\062\031\061\001" +
    "\002\000\004\002\ufffe\001\002\000\034\005\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\020\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\052\uffeb\001\002\000\004" +
    "\015\261\001\002\000\010\040\021\041\050\042\051\001" +
    "\002\000\004\016\263\001\002\000\004\017\264\001\002" +
    "\000\030\007\026\010\024\011\015\040\021\041\050\042" +
    "\051\043\030\045\025\046\046\047\036\052\032\001\002" +
    "\000\004\020\266\001\002\000\034\005\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\020\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\052\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\021\005\033\010\016\011\043" +
    "\012\026\013\040\014\046\015\034\016\036\017\015\025" +
    "\042\026\017\027\044\030\032\031\041\032\037\034\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\161\001\001\000\002\001\001\000" +
    "\044\004\210\005\033\010\016\011\043\012\026\013\040" +
    "\014\046\015\034\016\036\017\015\025\042\026\017\027" +
    "\044\030\032\031\041\032\037\034\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\053\034\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\056\001\001\000\026" +
    "\007\077\022\113\033\071\035\066\036\075\037\114\040" +
    "\104\041\073\042\115\043\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\132\036\131\001\001\000\002\001\001\000\006\007\130" +
    "\033\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\035\066\036\075\037\114\043\116\001\001\000\024\007" +
    "\077\033\071\035\066\036\075\037\114\040\121\041\117" +
    "\042\115\043\101\001\001\000\002\001\001\000\004\037" +
    "\124\001\001\000\004\037\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\134\033\071\001\001\000\006\007\133\033" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\143\023\136\024\137\033\141\040\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\143\023\146\024\137\033\141\040\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\077\033\071\035\066\036\075\037\114\040\121\041\151" +
    "\042\115\043\101\001\001\000\002\001\001\000\004\032" +
    "\154\001\001\000\004\044\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\157\005\033\010\016\011" +
    "\043\012\026\013\040\014\046\015\034\016\036\017\015" +
    "\025\042\026\017\027\044\030\032\031\041\032\037\034" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\007\077\022\165\033\071\035\066\036\075\037\114\040" +
    "\163\041\162\042\115\043\101\001\001\000\002\001\001" +
    "\000\004\037\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\007\077\033\071\035\066\036\075\037\114" +
    "\040\121\041\167\042\115\043\101\001\001\000\002\001" +
    "\001\000\004\032\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\174\005\033\010\016\011\043\012" +
    "\026\013\040\014\046\015\034\016\036\017\015\025\042" +
    "\026\017\027\044\030\032\031\041\032\037\034\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\201\005\033\010\016\011" +
    "\043\012\026\013\040\014\046\015\034\016\036\017\015" +
    "\025\042\026\017\027\044\030\032\031\041\032\037\034" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\007\077\033\071\035\066\036\075\037" +
    "\114\040\121\041\205\042\115\043\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\143\023\212\024\137\033\141\040\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\007" +
    "\077\033\071\035\066\036\075\037\114\040\121\041\215" +
    "\042\115\043\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\220\005\033\010\016\011\043\012\026" +
    "\013\040\014\046\015\034\016\036\017\015\025\042\026" +
    "\017\027\044\030\032\031\041\032\037\034\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\224\005\033\010\016\011\043\012\026\013\040" +
    "\014\046\015\034\016\036\017\015\025\042\026\017\027" +
    "\044\030\032\031\041\032\037\034\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\232\021\231\034\230\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\235\001\001\000\002\001\001\000\044\004\237\005\033" +
    "\010\016\011\043\012\026\013\040\014\046\015\034\016" +
    "\036\017\015\025\042\026\017\027\044\030\032\031\041" +
    "\032\037\034\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\242\021\231\034\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\077\033\071\035" +
    "\066\036\075\037\114\040\121\041\245\042\115\043\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\250\005\033\010\016\011\043\012\026\013\040\014\046" +
    "\015\034\016\036\017\015\025\042\026\017\027\044\030" +
    "\032\031\041\032\037\034\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\044\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\261\021\231\034\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\264" +
    "\005\033\010\016\011\043\012\026\013\040\014\046\015" +
    "\034\016\036\017\015\025\042\026\017\027\044\030\032" +
    "\031\041\032\037\034\022\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//Comentários abaixo obtidos do manual (https://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html)
/*
This method should be called whenever an error message is to be issued.
In the default implementation of this method, the first parameter provides the text of a
message which is printed on System.err and the second parameter is simply ignored.
It is very typical to override this method in order to provide a more sophisticated error reporting mechanism.
*/

    public void report_error(String message, Object info) {
            if (info instanceof Symbol) {
                Symbol symbol = (Symbol) info;
                TokenInfo tokenInfo = symbol.value instanceof TokenInfo ? (TokenInfo) symbol.value : null;

                if (tokenInfo != null) {
                    int linha = tokenInfo.linha;
                    int coluna = tokenInfo.coluna;
                    String lexema = tokenInfo.lexema;
                    System.err.println("Erro sintatico - linha: " + (linha + 1) + ", coluna " + (coluna + 1) + ", lexema: '"+ lexema +"' - " + message);
                } else {
                    System.err.println("Erro sintatico: " + message);
                }
            } else {
                System.err.println("Erro sintatico: " + message);
            }
        }
/*
This method should be called whenever a non-recoverable error occurs.
It responds by calling report_error(), then aborts parsing by calling the parser method done_parsing(),
and finally throws an exception. (In general done_parsing() should be called at any point that parsing needs to be terminated early).
*/
    public void report_fatal_error(String message, Object info) {
        report_error("Erro fatal: " + message, info);
        System.exit(1);
    }
/*
This method is called by the parser if it is unable to recover from a syntax error.
In the default implementation it calls: report_fatal_error("Couldn't repair and continue parse", null);.
*/
    public void unrecovered_syntax_error(Symbol cur_token) {
        report_fatal_error("O analisador lexico falhou e nao se recuperou", cur_token);
    }
/*
This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted).
In the default implementation it calls: report_error("Syntax error", null);.
*/
        public void syntax_error(Symbol cur_token){
            report_error("Erro sintatico", cur_token);
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // init_programa ::= PRGRM_DEF L_PARENTESES ID R_PARENTESES DOIS_PONTOS 
            {
              Object RESULT =null;
		/*blbalbal */
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= init_programa PRGRM_INI PRGRM_FIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= init_programa PRGRM_INI instrucoes PRGRM_FIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expressoes ::= expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressoes",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expressoes ::= expressao operador expressoes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressoes",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expressao ::= termo operador_comparacao termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expressao ::= termo operador_aritmetico termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expressao ::= ID operador_logico booleanos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expressao ::= booleanos operador_logico ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expressao ::= ID operador_logico ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressao ::= termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressao ::= operador termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucoes ::= instrucao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucoes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucoes ::= instrucao instrucoes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucoes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucao ::= instrucao_fluxo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucao ::= instrucao_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucao ::= instrucao_declaracao PT_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucao ::= instrucao_atribuicao PT_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrucao ::= FUN_RETURN ID PT_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instrucao ::= bloco_fun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucao ::= bloco_proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucao ::= proc_chamada PT_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrucao_fluxo ::= bloco_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_fluxo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucao_fluxo ::= bloco_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_fluxo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucao_loop ::= bloco_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrucao_loop ::= bloco_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrucao_loop ::= bloco_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrucao_declaracao ::= instrucao_definicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_declaracao",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucao_declaracao ::= instrucao_inicializacao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_declaracao",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucao_atribuicao ::= ID operador_atribuicao CARACTERE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_atribuicao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucao_atribuicao ::= ID operador_atribuicao booleanos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_atribuicao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrucao_atribuicao ::= ID operador_atribuicao fun_chamada 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_atribuicao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instrucao_atribuicao ::= ID operador_atribuicao expressoes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_atribuicao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instrucao_definicao ::= tipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_definicao",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucao_inicializacao ::= tipo ID operador_atribuicao CARACTERE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_inicializacao",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrucao_inicializacao ::= tipo ID operador_atribuicao booleanos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_inicializacao",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instrucao_inicializacao ::= tipo ID operador_atribuicao fun_chamada 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println(((TokenInfo)id).lexema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_inicializacao",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instrucao_inicializacao ::= tipo ID operador_atribuicao expressoes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_inicializacao",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloco_if ::= IF L_PARENTESES expressoes R_PARENTESES L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_if",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloco_if_else ::= bloco_if ELSE L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_if_else",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloco_for ::= FOR L_PARENTESES ID VIRGULA expressoes VIRGULA instrucao_atribuicao R_PARENTESES L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_for",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bloco_for ::= FOR L_PARENTESES instrucao_inicializacao VIRGULA expressoes VIRGULA instrucao_atribuicao R_PARENTESES L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_for",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bloco_while ::= WHILE L_PARENTESES expressoes R_PARENTESES L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bloco_do_while ::= DO L_CHAVES instrucoes R_CHAVES WHILE L_PARENTESES expressoes R_PARENTESES PT_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_do_while",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bloco_fun ::= FUNCTION ID L_PARENTESES parametros_lst R_PARENTESES DOIS_PONTOS tipo L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;
		System.out.println("bloco_fun");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_fun",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // fun_chamada ::= ID L_PARENTESES argumentos_lst R_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fun_chamada",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_lst ::= parametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_lst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_lst ::= parametro VIRGULA parametros_lst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_lst",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro ::= tipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // argumentos_lst ::= argumento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos_lst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // argumentos_lst ::= argumento VIRGULA argumentos_lst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos_lst",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // argumento ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // argumento ::= literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumento",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloco_proc ::= PROCEDURE ID L_PARENTESES parametros_lst R_PARENTESES L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_proc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // proc_chamada ::= ID L_PARENTESES argumentos_lst R_PARENTESES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_chamada",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= CARACTERE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= booleanos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // numero ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // numero ::= FLUTUANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo ::= TIPO_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo ::= TIPO_FLUTUANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo ::= TIPO_INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // termo ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(((TokenInfo)id).lexema);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termo ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador ::= operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador ::= operador_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador ::= operador_comparacao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador_comparacao ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador_comparacao ::= MAIOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador_comparacao ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador_comparacao ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador_comparacao ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // operador_comparacao ::= MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operador_aritmetico ::= ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operador_aritmetico ::= SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operador_aritmetico ::= MUL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operador_aritmetico ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operador_logico ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operador_logico ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operador_atribuicao ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operador_atribuicao ::= ADD_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operador_atribuicao ::= SUB_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // booleanos ::= BOOL_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // booleanos ::= BOOL_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanos",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
