
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import misc.TokenInfo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\003\007\000\002\002" +
    "\005\000\002\002\006\000\002\031\003\000\002\031\005" +
    "\000\002\032\005\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\003\000\002" +
    "\032\004\000\002\004\003\000\002\004\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\010\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\021\003\000\002" +
    "\021\003\000\002\022\005\000\002\017\004\000\002\020" +
    "\006\000\002\012\011\000\002\013\007\000\002\014\015" +
    "\000\002\014\015\000\002\015\011\000\002\016\013\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\007\003\000\002\007\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\030\003\000\002" +
    "\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\006\006\001\002\000\004\004\014\001" +
    "\002\000\004\002\013\001\002\000\004\012\007\001\002" +
    "\000\004\047\010\001\002\000\004\013\011\001\002\000" +
    "\004\010\012\001\002\000\004\004\000\001\002\000\004" +
    "\002\001\001\002\000\024\005\024\035\016\036\042\037" +
    "\043\040\023\042\021\043\040\044\031\047\025\001\002" +
    "\000\026\005\ufff2\015\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\047\ufff2\001\002\000\004" +
    "\047\uffd9\001\002\000\004\005\205\001\002\000\004\047" +
    "\204\001\002\000\004\012\176\001\002\000\030\005\uffee" +
    "\015\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\172\042" +
    "\uffee\043\uffee\044\uffee\047\uffee\001\002\000\004\012\164" +
    "\001\002\000\004\002\uffff\001\002\000\010\024\052\025" +
    "\054\026\053\001\002\000\004\011\uffe8\001\002\000\026" +
    "\005\ufff4\015\ufff4\035\016\036\042\037\043\040\023\042" +
    "\021\043\040\044\031\047\025\001\002\000\026\005\uffeb" +
    "\015\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\047\uffeb\001\002\000\004\014\151\001\002" +
    "\000\026\005\uffea\015\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\042\uffea\043\uffea\044\uffea\047\uffea\001\002\000\004" +
    "\011\150\001\002\000\026\005\uffed\015\uffed\035\uffed\036" +
    "\uffed\037\uffed\040\uffed\042\uffed\043\uffed\044\uffed\047\uffed" +
    "\001\002\000\004\011\147\001\002\000\026\005\ufff1\015" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1" +
    "\044\ufff1\047\ufff1\001\002\000\004\011\uffe9\001\002\000" +
    "\004\012\044\001\002\000\026\005\uffec\015\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec\044\uffec\047" +
    "\uffec\001\002\000\004\047\uffd7\001\002\000\004\047\uffd8" +
    "\001\002\000\012\035\016\036\042\037\043\047\045\001" +
    "\002\000\004\007\137\001\002\000\004\007\065\001\002" +
    "\000\004\047\050\001\002\000\010\024\052\025\054\026" +
    "\053\001\002\000\014\045\063\046\061\050\055\051\064" +
    "\052\062\001\002\000\014\045\uffc5\046\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\001\002\000\014\045\uffc3\046\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\001\002\000\014\045\uffc4\046\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\001\002\000\010\007\uffdd\011\uffdd" +
    "\013\uffdd\001\002\000\010\007\uffde\011\uffde\013\uffde\001" +
    "\002\000\010\007\uffdc\011\uffdc\013\uffdc\001\002\000\006" +
    "\007\uffe5\011\uffe5\001\002\000\040\007\uffda\011\uffda\013" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\001" +
    "\002\000\040\007\uffc1\011\uffc1\013\uffc1\016\uffc1\017\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\001\002\000\040\007\uffdb" +
    "\011\uffdb\013\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\001\002\000\040\007\uffc2\011\uffc2\013\uffc2\016" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\001\002\000" +
    "\044\016\067\017\110\020\103\021\104\022\074\023\071" +
    "\027\066\030\070\031\107\032\101\033\111\034\106\045" +
    "\063\046\061\047\076\051\064\052\062\001\002\000\044" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\051\uffc7\052\uffc7\001\002\000\044\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\051\uffd1\052\uffd1\001\002\000\044\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\027\uffc6\030" +
    "\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\045\uffc6\046\uffc6" +
    "\047\uffc6\051\uffc6\052\uffc6\001\002\000\044\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\045\uffcc\046\uffcc\047" +
    "\uffcc\051\uffcc\052\uffcc\001\002\000\044\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\045\uffd2\046\uffd2\047\uffd2" +
    "\051\uffd2\052\uffd2\001\002\000\036\007\uffd5\013\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\001\002\000" +
    "\044\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\051\uffcd\052\uffcd\001\002\000\004" +
    "\007\131\001\002\000\036\007\uffd6\013\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\027\066\030\070" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\001\002\000\044\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\051\uffd3\052\uffd3\001\002\000\036\007\ufff6" +
    "\013\ufff6\016\067\017\110\020\103\021\104\022\074\023" +
    "\071\027\ufff6\030\ufff6\031\107\032\101\033\111\034\106" +
    "\001\002\000\044\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\045\uffca\046\uffca\047\uffca\051\uffca\052\uffca\001" +
    "\002\000\010\045\063\046\061\047\120\001\002\000\044" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\051\uffcf\052\uffcf\001\002\000\044\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\045\uffce\046" +
    "\uffce\047\uffce\051\uffce\052\uffce\001\002\000\006\027\066" +
    "\030\070\001\002\000\044\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\022\uffc8\023\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\045\uffc8\046\uffc8\047\uffc8\051\uffc8\052" +
    "\uffc8\001\002\000\044\016\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\023\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\045\uffcb\046\uffcb\047\uffcb\051\uffcb\052\uffcb" +
    "\001\002\000\044\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\034\uffd0\045\uffd0\046\uffd0\047\uffd0\051\uffd0\052\uffd0\001" +
    "\002\000\044\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\001\002" +
    "\000\044\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\051\uffd4\052\uffd4\001\002\000" +
    "\036\007\ufffd\013\ufffd\016\067\017\110\020\103\021\104" +
    "\022\074\023\071\027\066\030\070\031\107\032\101\033" +
    "\111\034\106\001\002\000\044\016\067\017\110\020\103" +
    "\021\104\022\074\023\071\027\066\030\070\031\107\032" +
    "\101\033\111\034\106\045\063\046\061\047\076\051\064" +
    "\052\062\001\002\000\006\007\ufffc\013\ufffc\001\002\000" +
    "\004\047\117\001\002\000\036\007\ufff8\013\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\001\002\000\036" +
    "\007\uffd6\013\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\023\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\034\uffd6\001\002\000\036\007\ufff5\013\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\001\002\000\010\045" +
    "\063\046\061\047\120\001\002\000\010\045\063\046\061" +
    "\047\120\001\002\000\036\007\ufffb\013\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\034\ufffb\001\002\000\036\007" +
    "\ufffa\013\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa" +
    "\023\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\001\002\000\010\047\127\051\064\052\062\001\002" +
    "\000\036\007\ufff7\013\ufff7\016\ufff7\017\ufff7\020\ufff7\021" +
    "\ufff7\022\ufff7\023\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\001\002\000\036\007\ufff9\013\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\001\002\000" +
    "\004\047\025\001\002\000\004\013\133\001\002\000\004" +
    "\014\134\001\002\000\022\035\016\036\042\037\043\040" +
    "\023\042\021\043\040\044\031\047\025\001\002\000\004" +
    "\015\136\001\002\000\026\005\uffe1\015\uffe1\035\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\042\uffe1\043\uffe1\044\uffe1\047\uffe1" +
    "\001\002\000\044\016\067\017\110\020\103\021\104\022" +
    "\074\023\071\027\066\030\070\031\107\032\101\033\111" +
    "\034\106\045\063\046\061\047\076\051\064\052\062\001" +
    "\002\000\004\007\141\001\002\000\004\047\025\001\002" +
    "\000\004\013\143\001\002\000\004\014\144\001\002\000" +
    "\022\035\016\036\042\037\043\040\023\042\021\043\040" +
    "\044\031\047\025\001\002\000\004\015\146\001\002\000" +
    "\026\005\uffe2\015\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\047\uffe2\001\002\000\026\005" +
    "\ufff0\015\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\047\ufff0\001\002\000\026\005\uffef\015" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef\043\uffef" +
    "\044\uffef\047\uffef\001\002\000\022\035\016\036\042\037" +
    "\043\040\023\042\021\043\040\044\031\047\025\001\002" +
    "\000\004\015\153\001\002\000\004\042\154\001\002\000" +
    "\004\012\155\001\002\000\044\016\067\017\110\020\103" +
    "\021\104\022\074\023\071\027\066\030\070\031\107\032" +
    "\101\033\111\034\106\045\063\046\061\047\076\051\064" +
    "\052\062\001\002\000\004\013\157\001\002\000\004\011" +
    "\160\001\002\000\026\005\uffdf\015\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\042\uffdf\043\uffdf\044\uffdf\047\uffdf\001" +
    "\002\000\006\005\ufff3\015\ufff3\001\002\000\014\045\063" +
    "\046\061\050\055\051\064\052\062\001\002\000\006\011" +
    "\uffe7\013\uffe7\001\002\000\044\016\067\017\110\020\103" +
    "\021\104\022\074\023\071\027\066\030\070\031\107\032" +
    "\101\033\111\034\106\045\063\046\061\047\076\051\064" +
    "\052\062\001\002\000\004\013\166\001\002\000\004\014" +
    "\167\001\002\000\022\035\016\036\042\037\043\040\023" +
    "\042\021\043\040\044\031\047\025\001\002\000\004\015" +
    "\171\001\002\000\030\005\uffe4\015\uffe4\035\uffe4\036\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\047" +
    "\uffe4\001\002\000\004\014\173\001\002\000\022\035\016" +
    "\036\042\037\043\040\023\042\021\043\040\044\031\047" +
    "\025\001\002\000\004\015\175\001\002\000\026\005\uffe3" +
    "\015\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\047\uffe3\001\002\000\044\016\067\017\110" +
    "\020\103\021\104\022\074\023\071\027\066\030\070\031" +
    "\107\032\101\033\111\034\106\045\063\046\061\047\076" +
    "\051\064\052\062\001\002\000\004\013\200\001\002\000" +
    "\004\014\201\001\002\000\022\035\016\036\042\037\043" +
    "\040\023\042\021\043\040\044\031\047\025\001\002\000" +
    "\004\015\203\001\002\000\026\005\uffe0\015\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\042\uffe0\043\uffe0\044\uffe0\047" +
    "\uffe0\001\002\000\012\011\uffe6\024\052\025\054\026\053" +
    "\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\004\016\005\026\010\014\011\035" +
    "\012\021\013\033\014\040\015\027\016\031\017\036\020" +
    "\025\021\034\022\032\024\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\161\001\001\000\002\001\001\000" +
    "\036\004\160\005\026\010\014\011\035\012\021\013\033" +
    "\014\040\015\027\016\031\017\036\020\025\021\034\022" +
    "\032\024\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\045\024\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\050\001" +
    "\001\000\010\006\057\023\055\030\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\007\077\023\072\025\071\026\076" +
    "\027\111\030\104\031\074\032\112\033\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\125\001\001\000\002" +
    "\001\001\000\006\025\122\026\121\001\001\000\002\001" +
    "\001\000\006\007\120\023\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\071\026\076\027\111\033" +
    "\113\001\001\000\024\007\077\023\072\025\071\026\076" +
    "\027\111\030\104\031\114\032\112\033\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\124\023\072\001" +
    "\001\000\006\007\123\023\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\134\005\026\010" +
    "\014\011\035\012\021\013\033\014\040\015\027\016\031" +
    "\017\036\020\025\021\034\022\032\024\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\077\023\072" +
    "\025\071\026\076\027\111\030\104\031\137\032\112\033" +
    "\101\001\001\000\002\001\001\000\004\022\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\004\144\005" +
    "\026\010\014\011\035\012\021\013\033\014\040\015\027" +
    "\016\031\017\036\020\025\021\034\022\032\024\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\004\151\005\026\010\014\011" +
    "\035\012\021\013\033\014\040\015\027\016\031\017\036" +
    "\020\025\021\034\022\032\024\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\007\077" +
    "\023\072\025\071\026\076\027\111\030\104\031\155\032" +
    "\112\033\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\162\023" +
    "\055\030\056\001\001\000\002\001\001\000\024\007\077" +
    "\023\072\025\071\026\076\027\111\030\104\031\164\032" +
    "\112\033\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\004\167\005\026\010\014\011\035\012\021\013" +
    "\033\014\040\015\027\016\031\017\036\020\025\021\034" +
    "\022\032\024\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\173\005\026\010\014" +
    "\011\035\012\021\013\033\014\040\015\027\016\031\017" +
    "\036\020\025\021\034\022\032\024\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\007\077\023\072\025" +
    "\071\026\076\027\111\030\104\031\176\032\112\033\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\201\005\026\010\014\011\035\012\021\013\033\014\040" +
    "\015\027\016\031\017\036\020\025\021\034\022\032\024" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\050\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//Comentários abaixo obtidos do manual (https://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html)
/*
This method should be called whenever an error message is to be issued.
In the default implementation of this method, the first parameter provides the text of a
message which is printed on System.err and the second parameter is simply ignored.
It is very typical to override this method in order to provide a more sophisticated error reporting mechanism.
*/

    public void report_error(String message, Object info) {
            if (info instanceof Symbol) {
                Symbol symbol = (Symbol) info;
                TokenInfo tokenInfo = symbol.value instanceof TokenInfo ? (TokenInfo) symbol.value : null;

                if (tokenInfo != null) {
                    int linha = tokenInfo.linha;
                    int coluna = tokenInfo.coluna;
                    String lexema = tokenInfo.lexema;
                    System.err.println("Erro sintatico - linha: " + (linha + 1) + ", coluna " + (coluna + 1) + ", lexema: '"+ lexema +"' - " + message);
                } else {
                    System.err.println("Erro sintatico: " + message);
                }
            } else {
                System.err.println("Erro sintatico: " + message);
            }
        }
/*
This method should be called whenever a non-recoverable error occurs.
It responds by calling report_error(), then aborts parsing by calling the parser method done_parsing(),
and finally throws an exception. (In general done_parsing() should be called at any point that parsing needs to be terminated early).
*/
    public void report_fatal_error(String message, Object info) {
        report_error("Erro fatal: " + message, info);
        System.exit(1);
    }
/*
This method is called by the parser if it is unable to recover from a syntax error.
In the default implementation it calls: report_fatal_error("Couldn't repair and continue parse", null);.
*/
    public void unrecovered_syntax_error(Symbol cur_token) {
        report_fatal_error("O analisador lexico falhou e nao se recuperou", cur_token);
    }
/*
This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted).
In the default implementation it calls: report_error("Syntax error", null);.
*/
        public void syntax_error(Symbol cur_token){
            report_error("Erro sintatico", cur_token);
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // init_programa ::= PRGRM_DEF L_PARENTESES ID R_PARENTESES DOIS_PONTOS 
            {
              Object RESULT =null;
		/*blbalbal */
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= init_programa PRGRM_INI PRGRM_FIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= init_programa PRGRM_INI instrucoes PRGRM_FIM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expressoes ::= expressao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressoes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expressoes ::= expressao operador expressoes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressoes",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expressao ::= termo operador_comparacao termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expressao ::= termo operador_aritmetico termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expressao ::= ID operador_logico booleanos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expressao ::= booleanos operador_logico ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expressao ::= ID operador_logico ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expressao ::= termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expressao ::= operador termo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucoes ::= instrucao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucoes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucoes ::= instrucao instrucoes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucoes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucao ::= instrucao_fluxo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucao ::= instrucao_loop 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucao ::= instrucao_declaracao PT_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucao ::= instrucao_atribuicao PT_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instrucao_fluxo ::= bloco_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_fluxo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instrucao_fluxo ::= bloco_if_else 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_fluxo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instrucao_loop ::= bloco_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instrucao_loop ::= bloco_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instrucao_loop ::= bloco_do_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_loop",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instrucao_declaracao ::= instrucao_definicao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_declaracao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instrucao_declaracao ::= instrucao_inicializacao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_declaracao",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instrucao_atribuicao ::= ID operador_atribuicao literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_atribuicao",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instrucao_definicao ::= tipo ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_definicao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instrucao_inicializacao ::= tipo ID operador_atribuicao literal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao_inicializacao",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloco_if ::= IF L_PARENTESES expressoes R_PARENTESES L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_if",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloco_if_else ::= bloco_if ELSE L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_if_else",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloco_for ::= FOR L_PARENTESES ID VIRGULA expressoes VIRGULA instrucao_atribuicao R_PARENTESES L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_for",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloco_for ::= FOR L_PARENTESES instrucao_inicializacao VIRGULA expressoes VIRGULA instrucao_atribuicao R_PARENTESES L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_for",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bloco_while ::= WHILE L_PARENTESES expressoes R_PARENTESES L_CHAVES instrucoes R_CHAVES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_while",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bloco_do_while ::= DO L_CHAVES instrucoes R_CHAVES WHILE L_PARENTESES expressoes R_PARENTESES PT_VIRGULA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_do_while",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literal ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // literal ::= CARACTERE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // literal ::= booleanos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // numero ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // numero ::= FLUTUANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo ::= TIPO_CHAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tipo ::= TIPO_FLUTUANTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipo ::= TIPO_INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // termo ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termo ::= numero 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("termo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operador ::= operador_logico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operador ::= operador_aritmetico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operador ::= operador_comparacao 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operador_comparacao ::= MENOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operador_comparacao ::= MAIOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operador_comparacao ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operador_comparacao ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operador_comparacao ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operador_comparacao ::= MAIOR_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operador_aritmetico ::= ADD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operador_aritmetico ::= SUB 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operador_aritmetico ::= MUL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operador_aritmetico ::= DIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador_logico ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador_logico ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador_atribuicao ::= IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador_atribuicao ::= ADD_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador_atribuicao ::= SUB_IGUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // booleanos ::= BOOL_TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // booleanos ::= BOOL_FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("booleanos",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
