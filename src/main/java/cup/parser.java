
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package cup;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import misc.TokenInfo;
import ast.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\007\000\002\003" +
    "\006\000\002\004\005\000\002\005\003\000\002\005\004" +
    "\000\002\006\013\000\002\006\013\000\002\006\013\000" +
    "\002\006\007\000\002\006\011\000\002\006\007\000\002" +
    "\006\011\000\002\006\015\000\002\006\010\000\002\006" +
    "\010\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\007\003\000\002\007\005\000\002\007\005\000" +
    "\002\013\003\000\002\013\005\000\002\013\002\000\002" +
    "\014\004\000\002\012\003\000\002\012\005\000\002\012" +
    "\002\000\002\010\003\000\002\010\005\000\002\011\003" +
    "\000\002\011\006\000\002\011\005\000\002\021\003\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\015" +
    "\006\000\002\016\005\000\002\017\004\000\002\023\003" +
    "\000\002\023\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\006\006\001\002\000\004\004\014\001" +
    "\002\000\004\002\013\001\002\000\004\016\007\001\002" +
    "\000\004\054\010\001\002\000\004\017\011\001\002\000" +
    "\004\014\012\001\002\000\004\004\000\001\002\000\004" +
    "\002\001\001\002\000\004\020\016\001\002\000\004\005" +
    "\224\001\002\000\032\007\026\011\020\012\035\041\021" +
    "\042\037\043\040\044\017\045\030\047\025\050\036\051" +
    "\033\054\031\001\002\000\006\020\uffc3\054\uffc3\001\002" +
    "\000\004\054\217\001\002\000\006\020\uffc6\054\uffc6\001" +
    "\002\000\004\021\216\001\002\000\004\054\215\001\002" +
    "\000\004\015\214\001\002\000\004\016\210\001\002\000" +
    "\004\054\171\001\002\000\004\015\170\001\002\000\004" +
    "\016\162\001\002\000\010\030\133\031\136\032\134\001" +
    "\002\000\034\007\026\011\020\012\035\021\ufffd\041\021" +
    "\042\037\043\040\044\017\045\030\047\025\050\036\051" +
    "\033\054\031\001\002\000\004\020\016\001\002\000\004" +
    "\015\152\001\002\000\004\054\145\001\002\000\004\016" +
    "\041\001\002\000\006\020\uffc4\054\uffc4\001\002\000\006" +
    "\020\uffc5\054\uffc5\001\002\000\014\041\021\042\037\043" +
    "\040\044\017\054\042\001\002\000\012\013\135\030\133" +
    "\031\136\032\134\001\002\000\004\054\124\001\002\000" +
    "\004\013\116\001\002\000\004\013\046\001\002\000\016" +
    "\052\050\053\060\054\055\055\052\056\054\057\047\001" +
    "\002\000\040\013\uffd9\015\uffd9\017\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\033\uffd9\034\uffd9\035" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\001\002\000\040\013\uffdd" +
    "\015\uffdd\017\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\001\002\000\004\013\112\001\002\000\040\013" +
    "\uffdb\015\uffdb\017\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\001\002\000\026\013\uffee\017\uffee\022\101" +
    "\023\100\024\103\025\105\026\107\027\102\033\076\034" +
    "\106\001\002\000\040\013\uffda\015\uffda\017\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\001\002\000\042" +
    "\013\uffdf\015\uffdf\016\070\017\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\040\uffdf\001\002\000\040\013\uffde\015" +
    "\uffde\017\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\001\002\000\040\013\uffe2\015\uffe2\017\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\033\uffe2\034" +
    "\uffe2\035\063\036\061\037\062\040\064\001\002\000\040" +
    "\013\uffdc\015\uffdc\017\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\037\uffdc\040\uffdc\001\002\000\016\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\001\002\000\016\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\001\002\000" +
    "\016\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\001\002\000\016\052\uffca\053\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\uffca\001\002\000\016\052\050\053\060\054\066" +
    "\055\052\056\054\057\047\001\002\000\040\013\uffdf\015" +
    "\uffdf\017\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\001\002\000\040\013\uffe0\015\uffe0\017\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\001\002\000\020" +
    "\017\uffe5\052\050\053\060\054\055\055\052\056\054\057" +
    "\047\001\002\000\006\013\074\017\uffe7\001\002\000\004" +
    "\017\073\001\002\000\040\013\uffe1\015\uffe1\017\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\001\002\000" +
    "\020\017\uffe5\052\050\053\060\054\055\055\052\056\054" +
    "\057\047\001\002\000\004\017\uffe6\001\002\000\016\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\001\002" +
    "\000\016\052\050\053\060\054\055\055\052\056\054\057" +
    "\047\001\002\000\016\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\001\002\000\016\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\001\002\000\016\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\001\002\000" +
    "\016\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\001\002\000\016\052\050\053\060\054\055\055\052\056" +
    "\054\057\047\001\002\000\016\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\001\002\000\016\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\001\002\000\016" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\001" +
    "\002\000\006\013\uffec\017\uffec\001\002\000\006\013\uffed" +
    "\017\uffed\001\002\000\004\054\031\001\002\000\004\017" +
    "\114\001\002\000\004\020\016\001\002\000\034\007\ufffa" +
    "\011\ufffa\012\ufffa\021\ufffa\041\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\047\ufffa\050\ufffa\051\ufffa\054\ufffa\001\002" +
    "\000\016\052\050\053\060\054\055\055\052\056\054\057" +
    "\047\001\002\000\004\013\120\001\002\000\004\054\031" +
    "\001\002\000\004\017\122\001\002\000\004\020\016\001" +
    "\002\000\034\007\ufffb\011\ufffb\012\ufffb\021\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\047\ufffb\050\ufffb\051" +
    "\ufffb\054\ufffb\001\002\000\004\030\125\001\002\000\016" +
    "\052\050\053\060\054\055\055\052\056\054\057\047\001" +
    "\002\000\006\013\uffd8\015\uffd8\001\002\000\020\013\uffe4" +
    "\015\uffe4\017\uffe4\035\063\036\061\037\062\040\064\001" +
    "\002\000\016\052\050\053\060\054\055\055\052\056\054" +
    "\057\047\001\002\000\010\013\uffe3\015\uffe3\017\uffe3\001" +
    "\002\000\016\052\050\053\060\054\055\055\052\056\054" +
    "\057\047\001\002\000\016\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\057\uffc9\001\002\000\016\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002\000\016\052" +
    "\050\053\060\054\055\055\052\056\054\057\047\001\002" +
    "\000\016\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057" +
    "\uffc8\001\002\000\004\013\140\001\002\000\004\054\031" +
    "\001\002\000\004\017\142\001\002\000\004\020\016\001" +
    "\002\000\034\007\ufff9\011\ufff9\012\ufff9\021\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\045\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\054\ufff9\001\002\000\010\013\uffd7\015\uffd7\017\uffd7" +
    "\001\002\000\004\016\146\001\002\000\020\017\uffe5\052" +
    "\050\053\060\054\055\055\052\056\054\057\047\001\002" +
    "\000\004\017\150\001\002\000\004\015\151\001\002\000" +
    "\034\007\ufff2\011\ufff2\012\ufff2\021\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\054" +
    "\ufff2\001\002\000\034\007\uffef\011\uffef\012\uffef\021\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\047\uffef\050" +
    "\uffef\051\uffef\054\uffef\001\002\000\004\047\154\001\002" +
    "\000\004\016\155\001\002\000\016\052\050\053\060\054" +
    "\055\055\052\056\054\057\047\001\002\000\004\017\157" +
    "\001\002\000\004\015\160\001\002\000\034\007\ufff7\011" +
    "\ufff7\012\ufff7\021\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7" +
    "\045\ufff7\047\ufff7\050\ufff7\051\ufff7\054\ufff7\001\002\000" +
    "\004\021\ufffc\001\002\000\016\052\050\053\060\054\055" +
    "\055\052\056\054\057\047\001\002\000\004\017\164\001" +
    "\002\000\004\020\016\001\002\000\036\007\ufff6\011\ufff6" +
    "\012\ufff6\021\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\046\166\047\ufff6\050\ufff6\051\ufff6\054\ufff6\001\002" +
    "\000\004\020\016\001\002\000\034\007\ufff5\011\ufff5\012" +
    "\ufff5\021\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\054\ufff5\001\002\000\034\007" +
    "\ufff0\011\ufff0\012\ufff0\021\ufff0\041\ufff0\042\ufff0\043\ufff0" +
    "\044\ufff0\045\ufff0\047\ufff0\050\ufff0\051\ufff0\054\ufff0\001" +
    "\002\000\004\016\172\001\002\000\014\017\uffe9\041\021" +
    "\042\037\043\040\044\017\001\002\000\004\017\201\001" +
    "\002\000\004\054\200\001\002\000\006\013\176\017\uffeb" +
    "\001\002\000\014\017\uffe9\041\021\042\037\043\040\044" +
    "\017\001\002\000\004\017\uffea\001\002\000\006\013\uffe8" +
    "\017\uffe8\001\002\000\004\014\202\001\002\000\012\041" +
    "\021\042\037\043\040\044\017\001\002\000\004\020\016" +
    "\001\002\000\004\010\205\001\002\000\016\052\050\053" +
    "\060\054\066\055\052\056\054\057\047\001\002\000\004" +
    "\015\207\001\002\000\034\007\ufff4\011\ufff4\012\ufff4\021" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\054\ufff4\001\002\000\016\052\050\053" +
    "\060\054\055\055\052\056\054\057\047\001\002\000\004" +
    "\017\212\001\002\000\004\020\016\001\002\000\034\007" +
    "\ufff8\011\ufff8\012\ufff8\021\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\044\ufff8\045\ufff8\047\ufff8\050\ufff8\051\ufff8\054\ufff8\001" +
    "\002\000\034\007\ufff1\011\ufff1\012\ufff1\021\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\054\ufff1\001\002\000\006\015\uffd6\030\125\001\002" +
    "\000\042\005\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\021" +
    "\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe" +
    "\047\ufffe\050\ufffe\051\ufffe\054\ufffe\001\002\000\004\016" +
    "\220\001\002\000\014\017\uffe9\041\021\042\037\043\040" +
    "\044\017\001\002\000\004\017\222\001\002\000\004\020" +
    "\016\001\002\000\034\007\ufff3\011\ufff3\012\ufff3\021\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\047\ufff3\050" +
    "\ufff3\051\ufff3\054\ufff3\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\014\001\001\000\002\001\001" +
    "\000\016\005\021\006\031\015\023\016\026\017\033\020" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\131\001\001\000\016\005" +
    "\160\006\031\015\023\016\026\017\033\020\022\001\001" +
    "\000\004\004\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\043\016\044\020\042\001\001\000\004\026" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\050\011\052\021\056\022\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\023\076\025\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\066\022\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\070\012\071\021\056\022\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\070\012\074\021\056\022\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\110\011\052\021" +
    "\056\022\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\107\011" +
    "\052\021\056\022\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\112\001\001\000\002\001\001\000\004" +
    "\004\114\001\001\000\002\001\001\000\012\007\116\011" +
    "\052\021\056\022\055\001\001\000\002\001\001\000\004" +
    "\016\120\001\001\000\002\001\001\000\004\004\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\125" +
    "\011\126\021\056\022\055\001\001\000\002\001\001\000" +
    "\004\024\127\001\001\000\012\010\130\011\126\021\056" +
    "\022\055\001\001\000\002\001\001\000\012\010\143\011" +
    "\126\021\056\022\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\136\011\052\021\056\022\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\140" +
    "\001\001\000\002\001\001\000\004\004\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\070\012\146\021\056\022\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\155\011" +
    "\052\021\056\022\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\162\011\052\021\056\022\055\001\001\000\002\001\001" +
    "\000\004\004\164\001\001\000\002\001\001\000\004\004" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\172\014\174\020\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\176\014\174\020\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\202\001\001" +
    "\000\004\004\203\001\001\000\002\001\001\000\006\021" +
    "\205\022\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\210\011\052\021\056\022\055\001\001\000" +
    "\002\001\001\000\004\004\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\220\014\174\020\173\001\001" +
    "\000\002\001\001\000\004\004\222\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



//Comentários abaixo obtidos do manual (https://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html)
/*
This method should be called whenever an error message is to be issued.
In the default implementation of this method, the first parameter provides the text of a
message which is printed on System.err and the second parameter is simply ignored.
It is very typical to override this method in order to provide a more sophisticated error reporting mechanism.
*/

    public void report_error(String message, Object info) {
            if (info instanceof Symbol) {
                Symbol symbol = (Symbol) info;
                TokenInfo tokenInfo = symbol.value instanceof TokenInfo ? (TokenInfo) symbol.value : null;

                if (tokenInfo != null) {
                    int linha = tokenInfo.linha;
                    int coluna = tokenInfo.coluna;
                    String lexema = tokenInfo.lexema;
                    System.err.println("Erro sintatico - linha: " + (linha + 1) + ", coluna " + (coluna + 1) + ", lexema: '"+ lexema +"' - " + message);
                } else {
                    System.err.println("Erro sintatico: " + message);
                }
            } else {
                System.err.println("Erro sintatico: " + message);
            }
        }
/*
This method should be called whenever a non-recoverable error occurs.
It responds by calling report_error(), then aborts parsing by calling the parser method done_parsing(),
and finally throws an exception. (In general done_parsing() should be called at any point that parsing needs to be terminated early).
*/
    public void report_fatal_error(String message, Object info) {
        report_error("Erro fatal: " + message, info);
        System.exit(1);
    }
/*
This method is called by the parser if it is unable to recover from a syntax error.
In the default implementation it calls: report_fatal_error("Couldn't repair and continue parse", null);.
*/
    public void unrecovered_syntax_error(Symbol cur_token) {
        report_fatal_error("O analisador lexico falhou e nao se recuperou", cur_token);
    }
/*
This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted).
In the default implementation it calls: report_error("Syntax error", null);.
*/
        public void syntax_error(Symbol cur_token){
            report_error("Erro sintatico", cur_token);
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramaNode start_val = (ProgramaNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // init_programa ::= PROGRAMA L_PARENTESES ID R_PARENTESES DOIS_PONTOS 
            {
              InitProgramaNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenInfo id = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new InitProgramaNode(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("init_programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= init_programa BEGIN bloco END 
            {
              ProgramaNode RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		InitProgramaNode ini = (InitProgramaNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blocoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blocoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BlocoNode bloco = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ProgramaNode(ini, bloco);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloco ::= L_CHAVES instrucoes R_CHAVES 
            {
              BlocoNode RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstrucoesNode instr = (InstrucoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
           RESULT = new BlocoNode(instr);
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucoes ::= instrucao 
            {
              InstrucoesNode RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InstrucaoNode inst = (InstrucaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                InstrucoesNode instrucoesNode = new InstrucoesNode(inst);
                  RESULT = instrucoesNode;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucoes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucoes ::= instrucao instrucoes 
            {
              InstrucoesNode RESULT =null;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstrucaoNode inst = (InstrucaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int instrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int instrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		InstrucoesNode instrs = (InstrucoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  if (instrs != null){
                      instrs.instrucoes.add(inst);
                      RESULT = instrs;
                  } else {
                      InstrucoesNode instrucoesNode = new InstrucoesNode(inst);
                      RESULT = instrucoesNode;
                  }
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucoes",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucao ::= FOR L_PARENTESES inicializacao VIRGULA condicoes VIRGULA atribuicao R_PARENTESES bloco 
            {
              InstrucaoNode RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		InicializacaoNode ini = (InicializacaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CondicoesNode condicoes = (CondicoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int atribdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atribdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AtribuicaoNode atribd = (AtribuicaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blocoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blocoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlocoNode bloco = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForNode(bloco, condicoes, atribd, ini);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucao ::= FOR L_PARENTESES atribuicao VIRGULA condicoes VIRGULA atribuicao R_PARENTESES bloco 
            {
              InstrucaoNode RESULT =null;
		int atribleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AtribuicaoNode atrib = (AtribuicaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CondicoesNode condicoes = (CondicoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int atribdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atribdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AtribuicaoNode atribd = (AtribuicaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blocoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blocoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlocoNode bloco = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForNode(bloco, condicoes, atribd, atrib);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucao ::= FOR L_PARENTESES ID VIRGULA condicoes VIRGULA atribuicao R_PARENTESES bloco 
            {
              InstrucaoNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TokenInfo id = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int condicoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CondicoesNode condicoes = (CondicoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int atribdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int atribdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AtribuicaoNode atribd = (AtribuicaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blocoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blocoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlocoNode bloco = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForNode(bloco, condicoes, atribd, id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucao ::= WHILE L_PARENTESES condicoes R_PARENTESES bloco 
            {
              InstrucaoNode RESULT =null;
		int condicoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CondicoesNode condicoes = (CondicoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blocoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blocoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlocoNode bloco = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileNode(bloco, condicoes);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucao ::= DO bloco WHILE L_PARENTESES condicoes R_PARENTESES PT_VIRGULA 
            {
              InstrucaoNode RESULT =null;
		int blocoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int blocoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		BlocoNode bloco = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int condicoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CondicoesNode condicoes = (CondicoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileNode(bloco, condicoes);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instrucao ::= IF L_PARENTESES condicoes R_PARENTESES bloco 
            {
              InstrucaoNode RESULT =null;
		int condicoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CondicoesNode condicoes = (CondicoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blocoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blocoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlocoNode bloco = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfNode(condicoes, bloco);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instrucao ::= IF L_PARENTESES condicoes R_PARENTESES bloco ELSE bloco 
            {
              InstrucaoNode RESULT =null;
		int condicoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condicoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CondicoesNode condicoes = (CondicoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloco_ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloco_ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		BlocoNode bloco_if = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloco_elseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloco_elseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlocoNode bloco_else = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfElseNode(condicoes, bloco_if, bloco_else);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instrucao ::= FUNCTION ID L_PARENTESES parametros R_PARENTESES DOIS_PONTOS tipo bloco RETURN var PT_VIRGULA 
            {
              InstrucaoNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		TokenInfo id = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ParametrosNode par = (ParametrosNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TipoNode tip = (TipoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bloright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BlocoNode blo = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarNode var = (VarNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionNode(id,par, tip, blo, var);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instrucao ::= PROCEDURE ID L_PARENTESES parametros R_PARENTESES bloco 
            {
              InstrucaoNode RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParametrosNode par = (ParametrosNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlocoNode blo = (BlocoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProcedureNode(par, blo);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instrucao ::= PROC ID L_PARENTESES argumentos R_PARENTESES PT_VIRGULA 
            {
              InstrucaoNode RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArgumentosNode arg = (ArgumentosNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcNode(arg);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instrucao ::= inicializacao PT_VIRGULA 
            {
              InstrucaoNode RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InicializacaoNode ini = (InicializacaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ini;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instrucao ::= atribuicao PT_VIRGULA 
            {
              InstrucaoNode RESULT =null;
		int atribleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atribright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AtribuicaoNode atrib = (AtribuicaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = atrib;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instrucao ::= declaracao PT_VIRGULA 
            {
              InstrucaoNode RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclaracaoNode decl = (DeclaracaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = decl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucao",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condicoes ::= expressao 
            {
              CondicoesNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressaoNode exp = (ExpressaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                CondicoesNode condicoesNode = new CondicoesNode(exp);
                RESULT = condicoesNode;
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicoes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condicoes ::= expressao operador_logico condicoes 
            {
              CondicoesNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressaoNode exp = (ExpressaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorLogicoNode op = (OperadorLogicoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condicoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CondicoesNode condicoes = (CondicoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             if (condicoes != null){
               condicoes.expressaoNodeStack.add(exp);
               condicoes.operadorLogicoNodeStack.add(op);
               RESULT = condicoes;
             } else {
                CondicoesNode condicoesNode = new CondicoesNode(exp, op);
                RESULT = condicoesNode;
             }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicoes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condicoes ::= expressao operador_comparacao condicoes 
            {
              CondicoesNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressaoNode exp = (ExpressaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorComparacaoNode op = (OperadorComparacaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int condicoesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condicoesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CondicoesNode condicoes = (CondicoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if (condicoes != null){
              condicoes.expressaoNodeStack.add(exp);
              condicoes.operadorComparacaoNodeStack.add(op);
              RESULT = condicoes;
            } else {
              CondicoesNode condicoesNode = new CondicoesNode(exp, op, 1);
              RESULT = condicoesNode;
            }
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicoes",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parametros ::= parametro 
            {
              ParametrosNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametroNode p = (ParametroNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametrosNode(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametros ::= parametro VIRGULA parametros 
            {
              ParametrosNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ParametroNode p = (ParametroNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParametrosNode pr = (ParametrosNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (pr != null){
                    pr.parametrosNodes.add(p);
                    RESULT = pr;
                } else {
                    ParametrosNode parametrosNodes = new ParametrosNode();
                    parametrosNodes.parametrosNodes.add(p);
                    RESULT = parametrosNodes;
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= 
            {
              ParametrosNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametro ::= tipo ID 
            {
              ParametroNode RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoNode tipo = (TipoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo id = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParametroNode(tipo, id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // argumentos ::= expressao 
            {
              ArgumentosNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressaoNode exp = (ExpressaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArgumentosNode argumentosNode = new ArgumentosNode();
            argumentosNode.expressaoNodeStack.add(exp);
            RESULT = argumentosNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // argumentos ::= expressao VIRGULA argumentos 
            {
              ArgumentosNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressaoNode exp = (ExpressaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgumentosNode args = (ArgumentosNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 if (args != null){
                 args.expressaoNodeStack.add(exp);
                 RESULT = args;
             } else {
                 ArgumentosNode argumentosNode = new ArgumentosNode();
                 argumentosNode.expressaoNodeStack.add(exp);
                 RESULT = argumentosNode;
             }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argumentos ::= 
            {
              ArgumentosNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("argumentos",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressoes ::= expressao 
            {
              ExpressoesNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressaoNode exp = (ExpressaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ExpressoesNode expressoesNode = new ExpressoesNode(exp);
                RESULT = expressoesNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressoes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expressoes ::= expressao operador_aritmetico expressoes 
            {
              ExpressoesNode RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpressaoNode exp = (ExpressaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorAritmeticoNode op = (OperadorAritmeticoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressoesNode exprs = (ExpressoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                if (exprs != null){
                exprs.expressoes.add(exp);
                exprs.operadorNodes.add(op);
                RESULT = exprs;
                } else {
                    ExpressoesNode expressoesNode = new ExpressoesNode(exp, op);
                    RESULT = expressoesNode;
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressoes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expressao ::= var 
            {
              ExpressaoNode RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarNode var = (VarNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             RESULT = new ExpressaoNode(var);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expressao ::= ID L_PARENTESES argumentos R_PARENTESES 
            {
              ExpressaoNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TokenInfo id = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArgumentosNode args = (ArgumentosNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             RESULT = new ExpressaoNode(id, args);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expressao ::= var operador_aritmetico var 
            {
              ExpressaoNode RESULT =null;
		int varAleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varAright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarNode varA = (VarNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorAritmeticoNode op = (OperadorAritmeticoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarNode varB = (VarNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              RESULT = new ExpressaoNode(varA, varB, op);
           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // var ::= ID 
            {
              VarNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo id = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarNode(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // var ::= literal 
            {
              VarNode RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LiteralNode lit = (LiteralNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarNode(lit); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // literal ::= INTEIRO 
            {
              LiteralNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // literal ::= FLUTUANTE 
            {
              LiteralNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // literal ::= CARACTERE 
            {
              LiteralNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // literal ::= BOOL_TRUE 
            {
              LiteralNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // literal ::= BOOL_FALSE 
            {
              LiteralNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LiteralNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // inicializacao ::= tipo ID IGUAL expressoes 
            {
              InicializacaoNode RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TipoNode tipo = (TipoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenInfo id = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressoesNode exprs = (ExpressoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InicializacaoNode(tipo, id, exprs);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicializacao",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atribuicao ::= ID operador_atribuicao expressoes 
            {
              AtribuicaoNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TokenInfo id = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OperadorAtribuicaoNode op = (OperadorAtribuicaoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpressoesNode expr = (ExpressoesNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AtribuicaoNode(id, op, expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracao ::= tipo ID 
            {
              DeclaracaoNode RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoNode tipo = (TipoNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo id = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracaoNode(tipo, id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operador_logico ::= AND 
            {
              OperadorLogicoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorLogicoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operador_logico ::= OR 
            {
              OperadorLogicoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorLogicoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_logico",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operador_comparacao ::= MENOR 
            {
              OperadorComparacaoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorComparacaoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operador_comparacao ::= MAIOR 
            {
              OperadorComparacaoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorComparacaoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operador_comparacao ::= IGUAL_IGUAL 
            {
              OperadorComparacaoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorComparacaoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operador_comparacao ::= DIFERENTE 
            {
              OperadorComparacaoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorComparacaoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operador_comparacao ::= MENOR_IGUAL 
            {
              OperadorComparacaoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorComparacaoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operador_comparacao ::= MAIOR_IGUAL 
            {
              OperadorComparacaoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorComparacaoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_comparacao",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operador_aritmetico ::= ADD 
            {
              OperadorAritmeticoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorAritmeticoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operador_aritmetico ::= SUB 
            {
              OperadorAritmeticoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorAritmeticoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operador_aritmetico ::= MUL 
            {
              OperadorAritmeticoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorAritmeticoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operador_aritmetico ::= DIV 
            {
              OperadorAritmeticoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorAritmeticoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operador_atribuicao ::= IGUAL 
            {
              OperadorAtribuicaoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorAtribuicaoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operador_atribuicao ::= ADD_IGUAL 
            {
              OperadorAtribuicaoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorAtribuicaoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador_atribuicao ::= SUB_IGUAL 
            {
              OperadorAtribuicaoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OperadorAtribuicaoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_atribuicao",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo ::= TIPO_CHAR 
            {
              TipoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo ::= TIPO_FLUTUANTE 
            {
              TipoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo ::= TIPO_INTEIRO 
            {
              TipoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo ::= TIPO_BOOLEAN 
            {
              TipoNode RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TokenInfo x = (TokenInfo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoNode(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
