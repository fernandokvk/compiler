package cup;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import misc.TokenInfo;
import ast.*;

parser code {:
//Coment√°rios abaixo obtidos do manual (https://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html)
/*
This method should be called whenever an error message is to be issued.
In the default implementation of this method, the first parameter provides the text of a
message which is printed on System.err and the second parameter is simply ignored.
It is very typical to override this method in order to provide a more sophisticated error reporting mechanism.
*/

    public void report_error(String message, Object info) {
            if (info instanceof Symbol) {
                Symbol symbol = (Symbol) info;
                TokenInfo tokenInfo = symbol.value instanceof TokenInfo ? (TokenInfo) symbol.value : null;

                if (tokenInfo != null) {
                    int linha = tokenInfo.linha;
                    int coluna = tokenInfo.coluna;
                    String lexema = tokenInfo.lexema;
                    System.err.println("Erro sintatico - linha: " + (linha + 1) + ", coluna " + (coluna + 1) + ", lexema: '"+ lexema +"' - " + message);
                } else {
                    System.err.println("Erro sintatico: " + message);
                }
            } else {
                System.err.println("Erro sintatico: " + message);
            }
        }
/*
This method should be called whenever a non-recoverable error occurs.
It responds by calling report_error(), then aborts parsing by calling the parser method done_parsing(),
and finally throws an exception. (In general done_parsing() should be called at any point that parsing needs to be terminated early).
*/
    public void report_fatal_error(String message, Object info) {
        report_error("Erro fatal: " + message, info);
        System.exit(1);
    }
/*
This method is called by the parser if it is unable to recover from a syntax error.
In the default implementation it calls: report_fatal_error("Couldn't repair and continue parse", null);.
*/
    public void unrecovered_syntax_error(Symbol cur_token) {
        report_fatal_error("O analisador lexico falhou e nao se recuperou", cur_token);
    }
/*
This method is called by the parser as soon as a syntax error is detected (but before error recovery is attempted).
In the default implementation it calls: report_error("Syntax error", null);.
*/
        public void syntax_error(Symbol cur_token){
            report_error("Erro sintatico", cur_token);
        }
:};


terminal TokenInfo BEGIN, END, PROGRAMA;
terminal TokenInfo FUNCTION, RETURN, PROCEDURE, PROC;
terminal TokenInfo VIRGULA, DOIS_PONTOS, PT_VIRGULA;
terminal TokenInfo L_PARENTESES, R_PARENTESES, L_CHAVES, R_CHAVES;
terminal TokenInfo MENOR, MAIOR, IGUAL_IGUAL, DIFERENTE, MENOR_IGUAL, MAIOR_IGUAL;
terminal TokenInfo IGUAL, ADD_IGUAL, SUB_IGUAL;
terminal TokenInfo AND, OR;
terminal TokenInfo ADD, SUB, MUL, DIV;
terminal TokenInfo TIPO_CHAR, TIPO_INTEIRO, TIPO_FLUTUANTE, TIPO_BOOLEAN;
terminal TokenInfo IF, ELSE, WHILE, FOR, DO;
terminal TokenInfo INTEIRO, FLUTUANTE, ID, CARACTERE;
terminal TokenInfo BOOL_TRUE, BOOL_FALSE;

nonterminal InitProgramaNode init_programa;
nonterminal ProgramaNode programa;
nonterminal BlocoNode bloco;
nonterminal InstrucoesNode instrucoes;
nonterminal InstrucaoNode instrucao;
nonterminal CondicoesNode condicoes;
nonterminal ExpressoesNode expressoes;
nonterminal ExpressaoNode expressao;
nonterminal ArgumentosNode argumentos;
nonterminal ParametrosNode parametros;
nonterminal ParametroNode parametro;
nonterminal InicializacaoNode inicializacao;
nonterminal AtribuicaoNode atribuicao;
nonterminal DeclaracaoNode declaracao;
nonterminal TipoNode tipo;
nonterminal VarNode var;
nonterminal LiteralNode literal;
nonterminal OperadorNode operador;
nonterminal OperadorLogicoNode operador_logico;
nonterminal OperadorAritmeticoNode operador_aritmetico;
nonterminal OperadorComparacaoNode operador_comparacao;
nonterminal OperadorAtribuicaoNode operador_atribuicao;


precedence left IGUAL, ADD_IGUAL, SUB_IGUAL;
precedence left OR;
precedence left AND;
precedence left IGUAL_IGUAL, DIFERENTE, MENOR, MAIOR, MENOR_IGUAL, MAIOR_IGUAL;
precedence left ADD, SUB;
precedence left MUL, DIV;

start with programa;


init_programa ::= PROGRAMA L_PARENTESES ID:id R_PARENTESES DOIS_PONTOS {: RESULT = new InitProgramaNode(id);:};

programa ::= init_programa:ini BEGIN bloco:bloco END {: RESULT = new ProgramaNode(ini, bloco);:};

bloco ::= L_CHAVES instrucoes:instr R_CHAVES
       {:
           RESULT = new BlocoNode(instr);
       :};

instrucoes ::= instrucao:inst
              {:
                InstrucoesNode instrucoesNode = new InstrucoesNode(inst);
                  RESULT = instrucoesNode;
              :}
            | instrucao:inst instrucoes:instrs
              {:
                  if (instrs != null){
                      instrs.instrucoes.add(inst);
                      RESULT = instrs;
                  } else {
                      InstrucoesNode instrucoesNode = new InstrucoesNode(inst);
                      RESULT = instrucoesNode;
                  }
              :};

instrucao ::= FOR L_PARENTESES inicializacao:ini VIRGULA condicoes:condicoes VIRGULA atribuicao:atribd R_PARENTESES bloco:bloco {: RESULT = new ForNode(bloco, condicoes, atribd, ini);:}
           |  FOR L_PARENTESES atribuicao:atrib VIRGULA condicoes:condicoes VIRGULA atribuicao:atribd R_PARENTESES bloco:bloco {: RESULT = new ForNode(bloco, condicoes, atribd, atrib);:}
           |  FOR L_PARENTESES ID:id VIRGULA condicoes:condicoes VIRGULA atribuicao:atribd R_PARENTESES bloco:bloco {: RESULT = new ForNode(bloco, condicoes, atribd, id);:}
           |  WHILE L_PARENTESES condicoes:condicoes R_PARENTESES bloco:bloco {: RESULT = new WhileNode(bloco, condicoes);:}
           |  DO bloco:bloco WHILE L_PARENTESES condicoes:condicoes R_PARENTESES PT_VIRGULA {: RESULT = new WhileNode(bloco, condicoes);:}
           |  IF L_PARENTESES condicoes:condicoes R_PARENTESES bloco:bloco {: RESULT = new IfNode(condicoes, bloco);:}
           |  IF L_PARENTESES condicoes:condicoes R_PARENTESES bloco:bloco_if ELSE bloco:bloco_else {: RESULT = new IfElseNode(condicoes, bloco_if, bloco_else);:}
           |  FUNCTION ID L_PARENTESES parametros:par R_PARENTESES DOIS_PONTOS tipo:tip bloco:blo RETURN var:var PT_VIRGULA {: RESULT = new FunctionNode(par, tip, blo, var);:}
           |  PROCEDURE ID L_PARENTESES parametros:par R_PARENTESES bloco:blo {: RESULT = new ProcedureNode(par, blo);:}
           |  PROC ID L_PARENTESES argumentos:arg R_PARENTESES PT_VIRGULA {: RESULT = new ProcNode(arg);:}
           |  inicializacao:ini PT_VIRGULA {:RESULT = ini;:}
           |  atribuicao:atrib PT_VIRGULA {: RESULT = atrib;:}
           |  declaracao:decl PT_VIRGULA {:RESULT = decl;:}
           ;

condicoes ::= expressao:exp
           {:
                CondicoesNode condicoesNode = new CondicoesNode();
                condicoesNode.expressaoNodeStack.push(exp);
                RESULT = condicoesNode;
           :}
           | expressao:exp operador_logico:op condicoes:condicoes
           {:
             if (condicoes != null){
               condicoes.expressaoNodeStack.push(exp);
               condicoes.operadorLogicoNodeStack.push(op);
               RESULT = condicoes;
             } else {
                CondicoesNode condicoesNode = new CondicoesNode(exp, op);
                RESULT = condicoesNode;
             }
           :}
           | expressao:exp operador_comparacao:op condicoes:condicoes
           {:
            if (condicoes != null){
              condicoes.expressaoNodeStack.push(exp);
              condicoes.operadorComparacaoNodeStack.push(op);
              RESULT = condicoes;
            } else {
              CondicoesNode condicoesNode = new CondicoesNode(exp, op, 1);
              RESULT = condicoesNode;
            }
           :};

parametros ::= parametro:p {: RESULT = new ParametrosNode(p);:}
            | parametro:p VIRGULA parametros:pr
            {:
                if (pr != null){
                    pr.parametrosNodes.add(p);
                    RESULT = pr;
                } else {
                    ParametrosNode parametrosNodes = new ParametrosNode();
                    parametrosNodes.parametrosNodes.add(p);
                    RESULT = parametrosNodes;
                }
            :}
            | /* vazio */;

parametro ::= tipo:tipo ID:id {: RESULT = new ParametroNode(tipo, id);:};

argumentos ::= expressao:exp
            {:
            ArgumentosNode argumentosNode = new ArgumentosNode();
            argumentosNode.expressaoNodeStack.push(exp);
            RESULT = argumentosNode;
            :}
            | expressao:exp VIRGULA argumentos:args
            {:
                 if (args != null){
                 args.expressaoNodeStack.push(exp);
                 RESULT = args;
             } else {
                 ArgumentosNode argumentosNode = new ArgumentosNode();
                 argumentosNode.expressaoNodeStack.push(exp);
                 RESULT = argumentosNode;
             }
            :}
            | /* vazio */;

expressoes ::= expressao:exp
            {:
                ExpressoesNode expressoesNode = new ExpressoesNode(exp);
                RESULT = expressoesNode;
            :}
            | expressao:exp operador:op expressoes:exprs
            {:
                if (exprs != null){
                exprs.expressoes.push(exp);
                exprs.operadorNodes.push(op);
                RESULT = exprs;
                } else {
                    ExpressoesNode expressoesNode = new ExpressoesNode(exp, op);
                    RESULT = expressoesNode;
                }
            :};


expressao ::= var:var
           {:
             RESULT = new ExpressaoNode(var);
           :}
           |  ID L_PARENTESES argumentos R_PARENTESES
           |  var:varA operador_aritmetico:op var:varB
           {:
              RESULT = new ExpressaoNode(varA, varB, op);
           :};

var ::= ID:id {: RESULT = new VarNode(id);:}
     | literal:lit {: RESULT = new VarNode(lit); :};

literal ::= INTEIRO:x {: RESULT = new LiteralNode(x); :}
         | FLUTUANTE:x {: RESULT = new LiteralNode(x); :}
         | CARACTERE:x {: RESULT = new LiteralNode(x); :}
         | BOOL_TRUE:x {: RESULT = new LiteralNode(x); :}
         | BOOL_FALSE:x {: RESULT = new LiteralNode(x); :};


inicializacao ::= tipo:tipo ID:id IGUAL expressoes:exprs {: RESULT = new InicializacaoNode(tipo, id, exprs);:};
atribuicao ::= ID:id operador_atribuicao:op expressoes:expr {: RESULT = new AtribuicaoNode(id, op, expr); :};
declaracao ::= tipo:tipo ID:id {: RESULT = new DeclaracaoNode(tipo, id);:};

operador ::= operador_logico:x {: RESULT = x;:}
          | operador_aritmetico:x {: RESULT = x;:}
          | operador_comparacao:x {: RESULT = x;:};

operador_logico ::= AND:x               {: RESULT = new OperadorLogicoNode(x); :}
                 | OR:x                 {: RESULT = new OperadorLogicoNode(x); :};
operador_comparacao ::= MENOR:x         {: RESULT = new OperadorComparacaoNode(x); :}
                     | MAIOR:x          {: RESULT = new OperadorComparacaoNode(x); :}
                     | IGUAL_IGUAL:x    {: RESULT = new OperadorComparacaoNode(x); :}
                     | DIFERENTE:x      {: RESULT = new OperadorComparacaoNode(x); :}
                     | MENOR_IGUAL:x    {: RESULT = new OperadorComparacaoNode(x); :}
                     | MAIOR_IGUAL:x    {: RESULT = new OperadorComparacaoNode(x); :};

operador_aritmetico ::= ADD:x {: RESULT = new OperadorAritmeticoNode(x); :}
                     | SUB:x  {: RESULT = new OperadorAritmeticoNode(x); :}
                     | MUL:x  {: RESULT = new OperadorAritmeticoNode(x); :}
                     | DIV:x  {: RESULT = new OperadorAritmeticoNode(x); :};

operador_atribuicao ::= IGUAL:x {: RESULT = new OperadorAtribuicaoNode(x); :}
                  | ADD_IGUAL:x {: RESULT = new OperadorAtribuicaoNode(x); :}
                  | SUB_IGUAL:x {: RESULT = new OperadorAtribuicaoNode(x); :};

tipo ::= TIPO_CHAR:x        {: RESULT = new TipoNode(x); :}
      | TIPO_FLUTUANTE:x    {: RESULT = new TipoNode(x); :}
      | TIPO_INTEIRO:x      {: RESULT = new TipoNode(x); :}
      | TIPO_BOOLEAN:x      {: RESULT = new TipoNode(x); :};
